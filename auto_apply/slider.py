# coding:utf-8
import time
import os
import re
import base64
import json
import numpy as np
import js2py
import cv2
import requests

context = js2py.EvalJs()
slider_path = os.path.abspath('slider_json')


def time_file_name(ext: str):
    return '{}.{}'.format(int(time.time() * 1000), ext)


def dict2json(obj: dict, file_name: str):
    with open(file_name, 'w') as fp:
        json.dump(obj, fp)  # 将字典数据存储到本地json格式


def base64_to_image(base64_code):
    """把BASE64字符串转为图片"""
    img_data = base64.b64decode(base64_code)
    img_array = np.frombuffer(img_data, np.uint8)
    img = cv2.imdecode(img_array, 1)
    return img


def to_thresh(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)[1]


def thresh2str(thresh_img):
    height, width = thresh_img.shape
    rows_list = []
    for h in range(height):
        row = ''
        for w in range(width):
            value = thresh_img[h, w]
            if value > 0:
                flag = '1'
            else:
                flag = '0'
            row += flag
        rows_list.append(row)
    print('\n'.join(rows_list))
    return rows_list


def calculate_index(text_list: list):
    first_line = text_list[0]
    last_line = text_list[-1]
    sub = '01111111111111111111111111111110'  # 加个0排除干扰
    f_index_list = [substr.start() for substr in re.finditer(sub, first_line)]
    f_len = f_index_list.__len__()
    l_index_list = [substr.start() for substr in re.finditer(sub, last_line)]
    l_len = l_index_list.__len__()
    if f_len == 1 and l_len == 2:
        return f_index_list[0]
    elif f_len == 2 and l_len == 1:  # 第一行匹配到两次子串
        return l_index_list[0]
    elif f_len == 1 and l_len == 1:  # 干扰块与目标块重合起干扰块在上层
        f_index, l_index = f_index_list[0], l_index_list[0]
        if f_index > l_index:  # 左上角或右下角干扰块
            if last_line[f_index + 1] == '1':  # 右下角干扰块 +1,因为匹配串为01111111111111111111111111111110
                return f_index
            else:  # 左上角干扰块
                return l_index
        elif f_index < l_index:  # 左下角或右上角干扰块
            if first_line[l_index + 1] == '1':  # 右上角干扰块 +1,因为匹配串为01111111111111111111111111111110
                return l_index
            else:  # 左下角干扰块
                return f_index
        else:  # 干扰块与目标块重合
            return f_index_list[0]
    elif f_len == 0 and l_len == 1:  # 重合，干扰块缺口在首行，干扰块在目标块上方
        return l_index_list[0]
    elif f_len == 1 and l_len == 0:  # 重合，干扰块缺口在尾巴行，干扰块在目标块下方
        return f_index_list[0]
    else:  # 没有匹配到字符串则是未找到滑块
        return'无法识别滑块位置！'


# seed_js = """
# function getRandomNumberByRange(start, end) {
#             return Math.floor(Math.random() * (end - start) + start)
#         }
# var newSeed = function () {
#            var num = getRandomNumberByRange(3,6)
#            var seed = ''
#            for(var i = 0;i<num; i++){
#                seed+= getRandomNumberByRange(1,9)
#            }
#            return parseInt(seed)
#        }"""
# context.execute(seed_js)
# seed = context.newSeed()
# print('seed', seed)
# data = {'seed': seed}
# resp = requests.post('https://fj.122.gov.cn/m/tmri/captcha/sliderImg', data=data, verify=False)
# if resp.status_code == 200:
# resp = resp.json()
# resp = {"message": "\u64cd\u4f5c\u6210\u529f\uff01", "data": {"slider": "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAADC0lEQVR42u1aPUvEQBS01EYE9QobwcJWEAQL+yssjgMVbdROEMHCQhQtLBRsBVs7G/+C+Nuis2aWySO5D+/tJUgWHtlN7s43mXkf2Tgz0452tKMd7WhHwpE1YLRAyoB0b5bdrHe/MvI1NzD8oeO31ez8YzNY1XzQ2h6rvmM/5w7k/nMru/5aDzZsrufK1tZw3RrPuwMZ5Mikhru/edvJ1q7ms93XTljzWmOBQC47z0vB8d23jbCG88tnC9GwprwaB4QOAwAdBgMEpUDWX35ZQuDXAqQqFgCCzsJ5mgKCAQDP44jvNIYRgqCzmJMFXcMgNYAhwEYBof7hIGMCsoHtvc+G6zhijTkAKeipARmWWnmXNSPxSFNwuKbyqpUR1gKNDdxpvesAGLMW5gSZzym92oJd0yslEhz/cS5YDoDG+FCGyBKu1wIEf7gsveI8nKP+ITW2JASJOW4EWSF7UwdiUyychSkbCoQSIjMFAPm1qUlLA12rMwPbBrGmWV1bKaolaeUHZShlRGVFRlT3mqnIFlIw5cZa4g5kVDBwMjKSZyS2JrzrZEQBEkxZLXEHYmVWBggOag2wEtKawsrNWGI8hWaSseMZ7OMGvsqi0H68dgrtR+hyJQXzqJnONf2OA8TGCVt1W61tl6sWa0zOZG1ArKNa9GwR1FZFY2OxPxetFiDIPApETYGUOa/ZDkyS2WRZa1g9iZlKNF+o8sKCMkCw+vToLi3+2MXTdmFzYNTeSxMAi6Vt121BTNb99vYPs73LbuyJxnomydOydZSp1jKnMnMH0j88iWD+AsTGjD4pYg15aTdAcwdycHQawVBi44Cx2UylZZ3XmEoiLYCpkljV5pxt8bWCMz4sGI2ZJNKahJX4JJhnI7sJoYGvmc0dyN3DY2QFYMjKqDuJZXdcWxjLEr6TZMt0kmH1z2DXYpn8tYIHIH0mVyZiWy9dblIQHq8k7FOi9luurw9SAtGNBo0LSsw1qFMD0d7KPqeg2Ww0EAWjOynKTONlVQWGTaf7vlUTXnP/i3f27X8ymPENnDuURk4laiwAAAAASUVORK5CYII=", "background": "", "y": "21,47,44,11,var host = window.location.host;var seed = callThePageFunction(317977153);seed = host.indexOf('.')>2?parseInt(seed/(host.charCodeAt(0)+host.charCodeAt(1)+host.charCodeAt(2))):parseInt(seed/(host.charCodeAt(0)+host.charCodeAt(1)));seed=parseInt(seed/234);seed-=202;seed=parseInt(seed/802);seed=Math.abs(seed+1)%4;y_index=seed;"}, "code": 200, "seed": 18465}
resp = {"message": "\u64cd\u4f5c\u6210\u529f\uff01", "data": {"slider": "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAADRUlEQVR42u2ZPWgUQRTHUwSEAzurWIrpRBRSBKwsbORARYUgQvALKxu1UeRATyOiWASMSlDMQRThECyMoBAbLXJYSTCIKQQtrCwsVAiu/gbe8m5vZj/izN2pO/BnZr9m32/eezNztwMDZSlLWcpSlrIELFEflBLEBrL48Wf0uPU1OnTiWjSy/Xib1m4739HW5+S4uv9MdO/JO9PXwvKPuKZfNDv/2WjqUStavn/JyBuMdKRfjDG87ELzjanzCmPpY+nT97gv+hg79TDaOtaMdh67YWqAb955EAbk+eJK20iuVnpAGH0MH9x0Llq/+YqRtCfrtTAgvDTNKEZZjnU7eZ9+/vrs2xggKUI4CAghkGaUDVBCyHYd1W4tdACIRwivICDjl1+mesQF57qHUCU3XB6R8PIOQiImDU0LHxl1WwjKDEifaSCEl3cQRo9RFAP/VHlAUJAc4eXPWh+8iMmDHJGpF22pTsTtyui0qb2DnJ5omDy5eHvOGMC6QNsluc56oM/zLDV9IUA0jBYe8wpCrd2sS3KVT4pRllpkCyE8QM29zFj1feNGXrcpWXuuwaG90ZqhHR118lxl+GhqPojxSwersYKApAFiaJbYb9nWDPHE3bO7jfHfTq4LB5LlKRn1IiBagGgIPEOIdR1EjLWFWBEQgSCXyJuegGR5xQUCBMazJSG8BCIISJEcsXmDRHeBsIK/aNQNCNsSgQCwq7OWzfAkVJpHBALJak9+eE32rHXEZbgNygYiu1wEkKw7hBiJ731lTxqAUa6RL5IjElaEFG1ZT2QGCw7CGpDljSScDQSjr042jCfkd76ehrvqkSxvcN2V7IQWey2Sm+vaG8FBjDeUR1ye0NsU7RG9osuOV/ZaydU9uEfMXP97lMXI4ZE9bV7Qx9zn8oj8cwIIfZIrQUFIRJcID127ziHCKPk85wCiDcjTqSOxvIOQkPy2oPYh3Vdav0FAihhXFApP2J7vCchqlBayQf580HHrU0y3Bw6POuUd5MvMhiB6XduYKu8gecvKTCUWhupjUU8+KxQFchmvwXoGUQT0fXNXpnpmZBGQuflXmeprEA3DP4l8DLLVfQ+RZ0vz10DkmRj+ic/a5cf+/6n8Aplnyi5J1s1mAAAAAElFTkSuQmCC", "background": "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", "y": "14,50,12,var host = window.location.host;var seed = callThePageFunction(-1117776893);seed = host.indexOf('.')>2?parseInt(seed/(host.charCodeAt(0)+host.charCodeAt(1)+host.charCodeAt(2))):parseInt(seed/(host.charCodeAt(0)+host.charCodeAt(1)));seed+=923;seed=seed%923;seed=seed%17;seed+=477;seed-=629;seed+=120;seed=Math.abs(seed+1)%3;seed=Math.abs(seed+1)%3;seed=Math.abs(seed+1)%3;y_index=seed;"}, "code": 200, "seed": 3675}
# resp['seed'] = seed
file_name = os.path.join(slider_path, time_file_name('json'))
dict2json(resp, file_name)
background = base64_to_image(resp.get('data').get('background'))
slider = base64_to_image(resp.get('data').get('slider'))
y = resp.get('data').get('y')
seed = resp.get('seed')
print('seed:', seed)
js_content = """
        var window={location:{host: "%s"}}
        function callThePageFunction(seed) {
            htmlSeed = %s
            return seed = seed > 0 ? seed - htmlSeed : seed + htmlSeed;
                        }
        sy="%s"
        var arr = sy.split(',')
        var bds = arr[arr.length - 1]
        eval(bds)
        var y = arr[y_index]       
        """ % ('fj.122.gov.cn', seed, y)
print('js_content', js_content)
context.execute(js_content)
y = int(context.y)
print('y：', y)
# background = cv2.imread('background.jpg', cv2.IMREAD_UNCHANGED)
thresh = to_thresh(background)
# slider = cv2.imread('slider.jpg', cv2.IMREAD_UNCHANGED)
height, width, _ = background.shape
s_height, s_width, _ = slider.shape
cut = background[y + 10:y + s_height - 10, 0:width]
cut_thresh = to_thresh(cut)
print(cut_thresh.shape)
print('index:', calculate_index(thresh2str(cut_thresh)))
cv2.namedWindow("Picture", 0)
cv2.namedWindow("slider", 0)
cv2.namedWindow("cut", 0)
cv2.resizeWindow("Picture", width, height)
cv2.resizeWindow("slider", s_width, s_height)
cv2.resizeWindow("cut", width, 50)
while True:
    cv2.imshow('Picture', background)
    cv2.imshow('slider', slider)
    cv2.imshow('cut', cut_thresh)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cv2.destroyAllWindows()
